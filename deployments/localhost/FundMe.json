{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "NotOwner",
      "type": "error"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cheaperWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "funder",
          "type": "address"
        }
      ],
      "name": "getAddresstoAmt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFunders",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xd4e3c269e97673c9dfc9ffcba0f01d809306acad4017f3042e80f5ee0564b4ee",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "1045988",
    "logsBloom": "0x
    "blockHash": "0x3ca0d1969c4ff342542c72a1faa431c8e18364e284275830244205199fc992fd",
    "transactionHash": "0xd4e3c269e97673c9dfc9ffcba0f01d809306acad4017f3042e80f5ee0564b4ee",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "1045988",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "67b6a7ebee1a4f61366007c14c183c7f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"NotOwner\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"}],\"name\":\"getAddresstoAmt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Harigovind M G\",\"kind\":\"dev\",\"methods\":{\"fund()\":{\"details\":\"This implements price feed as our library \"},\"withdraw()\":{\"details\":\"an onlyOwner modifier is used here to only allow the contract owner to withdraw\"}},\"title\":\"This is a contract for crowd funding\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"fund()\":{\"notice\":\"This fucntion is used to fund the contract\"},\"withdraw()\":{\"notice\":\"This function is used for withdrawing funds from the contract \"}},\"notice\":\"This contract is a sample contract \",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// solhint-disable-next-line interface-starts-with-i\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(\\n    uint80 _roundId\\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\",\"keccak256\":\"0x257a8d28fa83d3d942547c8e129ef465e4b5f3f31171e7be4739a4c98da6b4f0\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {AggregatorV3Interface} from \\\"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./PriceConverter.sol\\\";\\n\\nerror NotOwner();\\n\\n/// @title This is a contract for crowd funding\\n/// @author Harigovind M G\\n/// @notice This contract is a sample contract \\n\\ncontract FundMe{\\n\\n    using PriceConverter for uint256;\\n\\n    address private immutable i_owner;\\n\\n    AggregatorV3Interface private s_priceFeed;\\n\\n    uint256 public constant MINIMUM_USD= 50 * 1e18;\\n    \\n    address[] private s_funders;\\n\\n    // Dictionary to store the address and amount \\n    mapping(address=>uint256) private s_addressToAmount;\\n\\n    modifier onlyOwner{\\n        // require(msg.sender==i_owner ,\\\"Only Owner can withdraw funds\\\");\\n        if(msg.sender!=i_owner){revert NotOwner();}\\n        _;\\n        // _ represents the rest of the code \\n    }\\n\\n    constructor(address priceFeedAddress){\\n        s_priceFeed = AggregatorV3Interface(priceFeedAddress);\\n        i_owner=msg.sender;\\n    }\\n\\n    // to handle payment directly to the contract without call data \\n    receive() external payable {\\n        fund();\\n     }\\n\\n    // to handle payment directly to the contract with call data \\n     fallback() external payable {\\n        fund();\\n     }\\n       \\n    \\n\\n    /**\\n    * @notice This fucntion is used to fund the contract\\n    * @dev This implements price feed as our library \\n    */\\n\\n   \\n   \\n    function fund() public payable{\\n\\n        require(msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD ,\\\"Dint send enough Ether\\\");\\n        s_funders.push(msg.sender);\\n        s_addressToAmount[msg.sender] += msg.value ;\\n        // we give *1e18 because , msg.value is in wei, 1 eth = 1e18\\n        // ETH-USD contract address 0x694AA1769357215DE4FAC081bf1f309aDC325306 , fetched from the price feed address in chain link docs\\n    }\\n    \\n    /**\\n     * @notice This function is used for withdrawing funds from the contract \\n     * @dev an onlyOwner modifier is used here to only allow the contract owner to withdraw\\n     */\\n\\n    function withdraw() public onlyOwner {\\n        \\n        //setting the mapping to zero\\n        for (uint256 i=0; i<s_funders.length; i++) \\n        {\\n          address funder = s_funders[i];\\n          s_addressToAmount[funder]= 0;\\n        }\\n        //resetting the funder array \\n        s_funders = new address[](0);\\n\\n        //withdrawing the fund from the contract\\n        // We are using call function here , send and tranfer can also be used \\n        (bool callSuc,)=payable(msg.sender).call{value: address(this).balance}(\\\"\\\");\\n        require(callSuc,\\\"Call failed\\\");\\n\\n    }\\n    \\n    function cheaperWithdraw() public onlyOwner{\\n        address[] memory funders = s_funders;\\n        uint256 fundersLength = funders.length;\\n        for(uint256 i=0;i<fundersLength;i++){\\n            address funder = funders[i];\\n            s_addressToAmount[funder]=0;\\n        }\\n        s_funders= new address[](0);\\n\\n        (bool callSuc,)=payable(msg.sender).call{value: address(this).balance}(\\\"\\\");\\n        require(callSuc,\\\"Call failed\\\");\\n    }\\n\\n    function getOwner() public view returns(address){\\n        return i_owner;\\n    }\\n\\n    function getPriceFeed() public view returns(AggregatorV3Interface) {\\n        return s_priceFeed;\\n   }\\n\\n   function getFunders(uint256 index) public view returns(address){\\n        return s_funders[index];\\n   }\\n   \\n   function getAddresstoAmt(address funder) public view returns(uint256){\\n        return s_addressToAmount[funder];\\n   }\\n\\n}\",\"keccak256\":\"0x356b84bd67eec4dc62d1de29312459338f5225afcc5377ff4286c4bd4b874a9e\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {AggregatorV3Interface} from \\\"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\\\";\\n\\nlibrary PriceConverter{\\n\\n\\n    function getPrice(AggregatorV3Interface priceFeed) public view returns(uint256) {\\n            // AggregatorV3Interface priceFeed = AggregatorV3Interface(0x694AA1769357215DE4FAC081bf1f309aDC325306);\\n            (,int256 price,,,)=priceFeed.latestRoundData();\\n            return uint(price * 1e10);\\n    }\\n\\n    function getConversionRate(uint256 ethAmount,AggregatorV3Interface priceFeed) internal view returns(uint256){\\n        uint256 eth_price = getPrice(priceFeed);\\n        uint256 ethAmountInUsd = (ethAmount * eth_price)/ 1e18;\\n        return ethAmountInUsd;\\n    }\\n\\n}\",\"keccak256\":\"0xe565949e168700001fa5996c5d53458ac46d8d5d7a528b941d1b66bc307d0f8a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b506040516200130b3803806200130b83398181016040528101906200003791906200011f565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b815250505062000151565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000e782620000ba565b9050919050565b620000f981620000da565b81146200010557600080fd5b50565b6000815190506200011981620000ee565b92915050565b600060208284031215620001385762000137620000b5565b5b6000620001488482850162000108565b91505092915050565b60805160601c61118d6200017e6000396000818161034e0152818161059e01526105ed015261118d6000f3fe60806040526004361061007f5760003560e01c80639e87a5cd1161004e5780639e87a5cd14610142578063b60d42881461016d578063be2693f014610177578063cef30be71461018e5761008e565b80633a7b6c74146100985780633ccfd60b146100d55780636b69a592146100ec578063893d20e8146101175761008e565b3661008e5761008c6101cb565b005b6100966101cb565b005b3480156100a457600080fd5b506100bf60048036038101906100ba9190610a9d565b610304565b6040516100cc9190610b0b565b60405180910390f35b3480156100e157600080fd5b506100ea61034c565b005b3480156100f857600080fd5b5061010161058d565b60405161010e9190610b35565b60405180910390f35b34801561012357600080fd5b5061012c61059a565b6040516101399190610b0b565b60405180910390f35b34801561014e57600080fd5b506101576105c2565b6040516101649190610baf565b60405180910390f35b6101756101cb565b005b34801561018357600080fd5b5061018c6105eb565b005b34801561019a57600080fd5b506101b560048036038101906101b09190610bf6565b610896565b6040516101c29190610b35565b60405180910390f35b6802b5e3af16b188000061020860008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346108df90919063ffffffff16565b1015610249576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161024090610c80565b60405180910390fd5b6001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102fb9190610ccf565b92505081905550565b60006001828154811061031a57610319610d25565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103d1576040517f30cd747100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60018054905081101561047d576000600182815481106103f7576103f6610d25565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061047590610d54565b9150506103d4565b50600067ffffffffffffffff81111561049957610498610d9d565b5b6040519080825280602002602001820160405280156104c75781602001602082028036833780820191505090505b50600190805190602001906104dd9291906109bb565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161050490610dfd565b60006040518083038185875af1925050503d8060008114610541576040519150601f19603f3d011682016040523d82523d6000602084013e610546565b606091505b505090508061058a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161058190610e5e565b60405180910390fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610670576040517f30cd747100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018054806020026020016040519081016040528092919081815260200182805480156106f457602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116106aa575b5050505050905060008151905060005b8181101561078457600083828151811061072157610720610d25565b5b602002602001015190506000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061077c90610d54565b915050610704565b50600067ffffffffffffffff8111156107a05761079f610d9d565b5b6040519080825280602002602001820160405280156107ce5781602001602082028036833780820191505090505b50600190805190602001906107e49291906109bb565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161080b90610dfd565b60006040518083038185875af1925050503d8060008114610848576040519150601f19603f3d011682016040523d82523d6000602084013e61084d565b606091505b5050905080610891576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161088890610e5e565b60405180910390fd5b505050565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000806108eb8361091b565b90506000670de0b6b3a764000082866109049190610e7e565b61090e9190610f07565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561096457600080fd5b505afa158015610978573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061099c9190610fc5565b5050509150506402540be400816109b39190611040565b915050919050565b828054828255906000526020600020908101928215610a34579160200282015b82811115610a335782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906109db565b5b509050610a419190610a45565b5090565b5b80821115610a5e576000816000905550600101610a46565b5090565b600080fd5b6000819050919050565b610a7a81610a67565b8114610a8557600080fd5b50565b600081359050610a9781610a71565b92915050565b600060208284031215610ab357610ab2610a62565b5b6000610ac184828501610a88565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610af582610aca565b9050919050565b610b0581610aea565b82525050565b6000602082019050610b206000830184610afc565b92915050565b610b2f81610a67565b82525050565b6000602082019050610b4a6000830184610b26565b92915050565b6000819050919050565b6000610b75610b70610b6b84610aca565b610b50565b610aca565b9050919050565b6000610b8782610b5a565b9050919050565b6000610b9982610b7c565b9050919050565b610ba981610b8e565b82525050565b6000602082019050610bc46000830184610ba0565b92915050565b610bd381610aea565b8114610bde57600080fd5b50565b600081359050610bf081610bca565b92915050565b600060208284031215610c0c57610c0b610a62565b5b6000610c1a84828501610be1565b91505092915050565b600082825260208201905092915050565b7f44696e742073656e6420656e6f75676820457468657200000000000000000000600082015250565b6000610c6a601683610c23565b9150610c7582610c34565b602082019050919050565b60006020820190508181036000830152610c9981610c5d565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610cda82610a67565b9150610ce583610a67565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610d1a57610d19610ca0565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610d5f82610a67565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610d9257610d91610ca0565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610de7600083610dcc565b9150610df282610dd7565b600082019050919050565b6000610e0882610dda565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610e48600b83610c23565b9150610e5382610e12565b602082019050919050565b60006020820190508181036000830152610e7781610e3b565b9050919050565b6000610e8982610a67565b9150610e9483610a67565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610ecd57610ecc610ca0565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610f1282610a67565b9150610f1d83610a67565b925082610f2d57610f2c610ed8565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610f5781610f38565b8114610f6257600080fd5b50565b600081519050610f7481610f4e565b92915050565b6000819050919050565b610f8d81610f7a565b8114610f9857600080fd5b50565b600081519050610faa81610f84565b92915050565b600081519050610fbf81610a71565b92915050565b600080600080600060a08688031215610fe157610fe0610a62565b5b6000610fef88828901610f65565b955050602061100088828901610f9b565b945050604061101188828901610fb0565b935050606061102288828901610fb0565b925050608061103388828901610f65565b9150509295509295909350565b600061104b82610f7a565b915061105683610f7a565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561109557611094610ca0565b5b817f800000000000000000000000000000000000000000000000000000000000000005831260008412600084131616156110d2576110d1610ca0565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561110f5761110e610ca0565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561114c5761114b610ca0565b5b82820290509291505056fea26469706673582212200360f3339f511fcf2637ea4bf19d8d6a675065d868d100793ba3052c4a4f11c464736f6c63430008080033",
  "deployedBytecode": "0x60806040526004361061007f5760003560e01c80639e87a5cd1161004e5780639e87a5cd14610142578063b60d42881461016d578063be2693f014610177578063cef30be71461018e5761008e565b80633a7b6c74146100985780633ccfd60b146100d55780636b69a592146100ec578063893d20e8146101175761008e565b3661008e5761008c6101cb565b005b6100966101cb565b005b3480156100a457600080fd5b506100bf60048036038101906100ba9190610a9d565b610304565b6040516100cc9190610b0b565b60405180910390f35b3480156100e157600080fd5b506100ea61034c565b005b3480156100f857600080fd5b5061010161058d565b60405161010e9190610b35565b60405180910390f35b34801561012357600080fd5b5061012c61059a565b6040516101399190610b0b565b60405180910390f35b34801561014e57600080fd5b506101576105c2565b6040516101649190610baf565b60405180910390f35b6101756101cb565b005b34801561018357600080fd5b5061018c6105eb565b005b34801561019a57600080fd5b506101b560048036038101906101b09190610bf6565b610896565b6040516101c29190610b35565b60405180910390f35b6802b5e3af16b188000061020860008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346108df90919063ffffffff16565b1015610249576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161024090610c80565b60405180910390fd5b6001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102fb9190610ccf565b92505081905550565b60006001828154811061031a57610319610d25565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103d1576040517f30cd747100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60018054905081101561047d576000600182815481106103f7576103f6610d25565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061047590610d54565b9150506103d4565b50600067ffffffffffffffff81111561049957610498610d9d565b5b6040519080825280602002602001820160405280156104c75781602001602082028036833780820191505090505b50600190805190602001906104dd9291906109bb565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161050490610dfd565b60006040518083038185875af1925050503d8060008114610541576040519150601f19603f3d011682016040523d82523d6000602084013e610546565b606091505b505090508061058a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161058190610e5e565b60405180910390fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610670576040517f30cd747100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018054806020026020016040519081016040528092919081815260200182805480156106f457602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116106aa575b5050505050905060008151905060005b8181101561078457600083828151811061072157610720610d25565b5b602002602001015190506000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061077c90610d54565b915050610704565b50600067ffffffffffffffff8111156107a05761079f610d9d565b5b6040519080825280602002602001820160405280156107ce5781602001602082028036833780820191505090505b50600190805190602001906107e49291906109bb565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161080b90610dfd565b60006040518083038185875af1925050503d8060008114610848576040519150601f19603f3d011682016040523d82523d6000602084013e61084d565b606091505b5050905080610891576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161088890610e5e565b60405180910390fd5b505050565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000806108eb8361091b565b90506000670de0b6b3a764000082866109049190610e7e565b61090e9190610f07565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561096457600080fd5b505afa158015610978573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061099c9190610fc5565b5050509150506402540be400816109b39190611040565b915050919050565b828054828255906000526020600020908101928215610a34579160200282015b82811115610a335782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906109db565b5b509050610a419190610a45565b5090565b5b80821115610a5e576000816000905550600101610a46565b5090565b600080fd5b6000819050919050565b610a7a81610a67565b8114610a8557600080fd5b50565b600081359050610a9781610a71565b92915050565b600060208284031215610ab357610ab2610a62565b5b6000610ac184828501610a88565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610af582610aca565b9050919050565b610b0581610aea565b82525050565b6000602082019050610b206000830184610afc565b92915050565b610b2f81610a67565b82525050565b6000602082019050610b4a6000830184610b26565b92915050565b6000819050919050565b6000610b75610b70610b6b84610aca565b610b50565b610aca565b9050919050565b6000610b8782610b5a565b9050919050565b6000610b9982610b7c565b9050919050565b610ba981610b8e565b82525050565b6000602082019050610bc46000830184610ba0565b92915050565b610bd381610aea565b8114610bde57600080fd5b50565b600081359050610bf081610bca565b92915050565b600060208284031215610c0c57610c0b610a62565b5b6000610c1a84828501610be1565b91505092915050565b600082825260208201905092915050565b7f44696e742073656e6420656e6f75676820457468657200000000000000000000600082015250565b6000610c6a601683610c23565b9150610c7582610c34565b602082019050919050565b60006020820190508181036000830152610c9981610c5d565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610cda82610a67565b9150610ce583610a67565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610d1a57610d19610ca0565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610d5f82610a67565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610d9257610d91610ca0565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610de7600083610dcc565b9150610df282610dd7565b600082019050919050565b6000610e0882610dda565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610e48600b83610c23565b9150610e5382610e12565b602082019050919050565b60006020820190508181036000830152610e7781610e3b565b9050919050565b6000610e8982610a67565b9150610e9483610a67565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610ecd57610ecc610ca0565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610f1282610a67565b9150610f1d83610a67565b925082610f2d57610f2c610ed8565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610f5781610f38565b8114610f6257600080fd5b50565b600081519050610f7481610f4e565b92915050565b6000819050919050565b610f8d81610f7a565b8114610f9857600080fd5b50565b600081519050610faa81610f84565b92915050565b600081519050610fbf81610a71565b92915050565b600080600080600060a08688031215610fe157610fe0610a62565b5b6000610fef88828901610f65565b955050602061100088828901610f9b565b945050604061101188828901610fb0565b935050606061102288828901610fb0565b925050608061103388828901610f65565b9150509295509295909350565b600061104b82610f7a565b915061105683610f7a565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561109557611094610ca0565b5b817f800000000000000000000000000000000000000000000000000000000000000005831260008412600084131616156110d2576110d1610ca0565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561110f5761110e610ca0565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561114c5761114b610ca0565b5b82820290509291505056fea26469706673582212200360f3339f511fcf2637ea4bf19d8d6a675065d868d100793ba3052c4a4f11c464736f6c63430008080033",
  "devdoc": {
    "author": "Harigovind M G",
    "kind": "dev",
    "methods": {
      "fund()": {
        "details": "This implements price feed as our library "
      },
      "withdraw()": {
        "details": "an onlyOwner modifier is used here to only allow the contract owner to withdraw"
      }
    },
    "title": "This is a contract for crowd funding",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "fund()": {
        "notice": "This fucntion is used to fund the contract"
      },
      "withdraw()": {
        "notice": "This function is used for withdrawing funds from the contract "
      }
    },
    "notice": "This contract is a sample contract ",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 61,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(AggregatorV3Interface)45"
      },
      {
        "astId": 69,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 73,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_addressToAmount",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}